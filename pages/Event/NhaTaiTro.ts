import { Page, Locator, expect } from "@playwright/test";

export class NhaTaiTroPage {
    readonly page: Page;
    readonly sponsorTitle: Locator;
    readonly sponsorCards: Locator;
    readonly sponsorImages: Locator;
    readonly sponsorNames: Locator;

    constructor (page: Page) {
        this.page = page;
        this.sponsorTitle = page.locator("h6", { hasText: "Nh√† t√†i tr·ª£ ch∆∞∆°ng tr√¨nh" });
        this.sponsorCards = page.locator(".donors .itemDonors");
        this.sponsorImages = this.sponsorCards.locator("img");
        this.sponsorNames = this.sponsorCards.locator("p");
    }

    async verifySponsorsSection() {
        //Ki·ªÉm tra ti√™u ƒë·ªÅ hi·ªÉn th·ªã
        await expect(this.sponsorTitle).toBeVisible();

        const count = await this.sponsorCards.count();
        console.log(`üéØ T·ªïng s·ªë nh√† t√†i tr·ª£ t√¨m th·∫•y: ${count}`);
        expect(count).toBeGreaterThanOrEqual(4);

        //Duy·ªát qua t·ª´ng card
        for (let i = 0; i < count; i++) {
            const img = this.sponsorImages.nth(i);
            const nameEl = this.sponsorNames.nth(i);

            //K√©o ·∫£nh v√†o t·∫ßm nh√¨n ƒë·ªÉ load (n·∫øu lazy-load)
            await img.scrollIntoViewIfNeeded();
            await img.waitFor({ state: 'visible' });

            //ƒê·∫£m b·∫£o ·∫£nh ƒë√£ load ho√†n to√†n tr∆∞·ªõc khi ki·ªÉm tra
            await img.evaluate(async (el: HTMLImageElement) => {
                if (!el.complete || el.naturalWidth === 0) {
                    await new Promise<void>((resolve, reject) => {
                        el.addEventListener('load', () => resolve(), { once: true });
                        el.addEventListener('error', () => reject('‚ùå L·ªói load ·∫£nh: ' + el.src), { once: true });
                    })
                }
            });

            //L·∫•y th√¥ng tin ·∫£nh v√† t√™n
            const naturalWidth = await img.evaluate((el: HTMLImageElement) => el.naturalWidth);
            const name = (await nameEl.textContent())?.trim() || "Kh√¥ng c√≥ t√™n";
            console.log(`üñºÔ∏è ·∫¢nh ${i + 1}: ${naturalWidth}px   üíº ${name}`);

            //Ki·ªÉm tra
            expect(naturalWidth, `·∫¢nh ${i + 1} ch∆∞a load th√†nh c√¥ng`).toBeGreaterThan(0);
            await expect(nameEl).toBeVisible();
        }
    }
}